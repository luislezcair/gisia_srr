@using VTeIC.Requerimientos.Entidades
@using VTeIC.Requerimientos.Web.ViewModels
@model List<QuestionViewModel>

@{
    ViewBag.Title = "VTeIC";
}

@Styles.Render("~/Content/jquerysteps")

<h2 class="srr">Sistema de Recopilación de Requerimientos</h2>

<form action="/VTeIC/PostAnswer" method="post" id="form-vteic">
    <div id="wizard" class="wizard clearfix vertical">
        <div class="steps clearfix">
            <ul role="tablist">
                @{ int index = 0; }
                @foreach (var question in Model)
                {
                    bool first = question.Equals(Model.First());
                    <li role="tab" data-question="@(question.Id)" class="@( first ? "first current" : "disabled" )" aria-disabled="false" aria-selected="true">
                        <a href="#" data-question="@(question.Id)">
                            <span class="number">@(++index). </span>@question.Title
                        </a>
                    </li>
                }
            </ul>
        </div>
        <div class="content clearfix well">
            @foreach (var question in Model)
            {
                bool first = question.Equals(Model.First());

                <section role="tabpanel" data-question="@(question.Id)" class="body current @(first ? "" : "hidden")" aria-hidden="false">
                    <div class="text-center col-md-12">
                        <p id="question-text-q@(question.Id)" class="lead">@(question.Text)</p>
                        <div class="answer-field">
                            @if (question.QuestionType == QuestionTypes.TEXT_FIELD)
                            {
                                <input type="text" class="form-control input-lg" id="text-q-@(question.Id)" @(question.IsPivot ? "required" : "") autocomplete="off" autofocus>
                            }
                            else if (question.QuestionType == QuestionTypes.BOOLEAN)
                            {
                                <button type="button" class="btn btn-primary btn-answer-yes">Sí</button>
                                <button type="button" class="btn btn-primary btn-answer-no">No</button>
                            }
                            else
                            {
                                foreach (var choice in question.ChoiceOptions)
                                {
                                    <div class="row">
                                        <div class="col-sm-offset-5 col-sm-7 choice-list">
                                            <input type="checkbox" value="@(choice.Id)" data-question="@(question.Id)" id="choice-q@(question.Id)-@(choice.Id)"/>
                                            <label for="choice-q@(question.Id)-@(choice.Id)">@choice.Text</label>
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                </section>
            }
            <section role="tabpanel" class="body current" id="search-keys" style="display: none">
                <div class="row">
                    <div class="col-sm-12 align-left">
                    </div>
                </div>
            </section>
        </div>

        <div class="actions clearfix well">
            <button type="button" id="btn-prev" class="btn btn-primary" disabled>Anterior</button>
            <button type="submit" id="btn-next" class="btn btn-primary">Siguiente</button>
            <a type="button" id="btn-back" class="btn btn-primary" href="" style="display: none">Volver</a>
        </div>
    </div>
</form>

<script>
    var QuestionType = {
        Text: @((int) QuestionTypes.TEXT_FIELD),
        Boolean: @((int) QuestionTypes.BOOLEAN),
        MultipleChoice: @((int) QuestionTypes.MULTIPLE_CHOICE) };

    var CurrentQuestion = {
        Id: @(Model.First().Id),
        Type: @((int) Model.First().QuestionType) };

    var BooleanAnswer = null;

    $('.btn-answer-yes').click(function() {
        BooleanAnswer = true;
        $('#btn-next').prop('disabled', false).click();
    });

    $('.btn-answer-no').click(function() {
        BooleanAnswer = false;
        $('#btn-next').prop('disabled', false).click();
    });

    // Click en Next o Finish
    $('#form-vteic').submit(function(event) {
        var answer = {
            QuestionId: CurrentQuestion.Id,
            TextAnswer: '',
            BooleanAnswer: null,
            OptionsAnswer: []
        };

        fill_answer(answer);

        $.ajax({
            url: '/VTeIC/PostAnswer',
            data: JSON.stringify(answer),
            contentType: 'application/json; charset=utf-8',
            dataType: 'json',
            async: true,
            type: 'POST',
            success: function(response) {
                // Si fue la última pregunta, solicitamos las claves de búsqueda
                if (response.Finished) {
                    $.post('/VTeIC/SearchKey', null, function(keyResponse) {
                        if (!keyResponse.result) {
                            alert(keyResponse.error);
                            return;
                        }

                        find_question_section(CurrentQuestion.Id).hide();
                        show_search_keys(keyResponse.searchKeys);

                        $('#btn-next').hide();
                        $('#btn-back').show();
                    });
                    return;
                }

                if (response.LastQuestion) {
                    $('#btn-next').text('Finalizar');
                }

                var nextQuestion = response.Question;
                switch_question(nextQuestion.Id);

                CurrentQuestion.Id = nextQuestion.Id;
                CurrentQuestion.Type = nextQuestion.QuestionType;

                if (CurrentQuestion.Type == QuestionType.Boolean) {
                    $('#btn-next').prop('disabled', true);
                }

                // Actualiza el texto de la pregunta por si es pivot
                $('#question-text-q' + nextQuestion.Id).html(nextQuestion.Text);
            }
        });
        event.preventDefault();
    });

    /**
     * Obtiene la respuesta de los campos correspondientes de acuerdo al tipo de pregunta
     **/
    function fill_answer(answer) {
        if (CurrentQuestion.Type == QuestionType.Text) {
            answer.TextAnswer = $('#text-q-' + CurrentQuestion.Id).val();
        } else if (CurrentQuestion.Type == QuestionType.Boolean) {
            answer.BooleanAnswer = BooleanAnswer;
        } else {
            answer.OptionsAnswer = get_choices();
        }
    }

    /**
     * Oculta la pregunta anterior y muestra la próxima
     **/
    function switch_question(next_question) {
        var currentTab = find_question_tab(CurrentQuestion.Id);
        var currentSection = find_question_section(CurrentQuestion.Id);

        var nextTab = find_question_tab(next_question);
        var nextSection = find_question_section(next_question);

        currentTab.removeClass('current')
            .addClass('done');

        nextTab.addClass('current')
            .removeClass('disabled')
            .removeClass('done');

        currentSection.hide();
        nextSection.removeClass('hidden').show();

        // Si la pregunta ya fue respondida limpia los campos de respuesta
        nextSection.find('input[type=text]').val('').focus();
        nextSection.find('input[type=checkbox]').prop('checked', false);
    }

    // Obtiene el tab correspondiente a la pregunta q
    function find_question_tab(q) {
        return $("li[data-question=" + q + "]");
    }

    // Obtiene la section correspondiente a la pregunta q
    function find_question_section(q) {
        return $("section[data-question=" + q + "]");
    }

    // Devuelve un arreglo con los valores de los checkboxes seleccionados como respuesta
    function get_choices() {
        var options = $('input[data-question=' + CurrentQuestion.Id + ']:checked');
        return $.map(options,
            function(v) {
                return Number($(v).val());
            });
    }

    // Muestra las claves de búsqueda devueltas
    function show_search_keys(search_keys) {
        var section = $('#search-keys');
        section.html("");

        for (var i = 0; i < search_keys.length; i++) {
            section.append("<p>" + search_keys[i] + "</p>");
        }

        section.show();
    }
</script>